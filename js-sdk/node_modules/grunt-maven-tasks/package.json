{
  "name": "grunt-maven-tasks",
  "description": "Grunt plugin to deploy a file to a maven repository",
  "version": "1.2.0",
  "homepage": "https://github.com/smh/grunt-maven-tasks",
  "author": {
    "name": "Stein Martin Hustad",
    "email": "stein@hustad.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/smh/grunt-maven-tasks.git"
  },
  "bugs": {
    "url": "https://github.com/smh/grunt-maven-tasks/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/smh/grunt-maven-tasks/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "semver": "~1.1.4",
    "grunt-contrib-compress": "~0.4.5"
  },
  "devDependencies": {
    "mocha": "~1.8.2",
    "async": "~0.2.6",
    "chai": "~1.5.0",
    "chai-things": "~0.1.1",
    "rimraf": "~2.1.4",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-simple-mocha": "git://github.com/yaymukund/grunt-simple-mocha.git#7d1cb9bfd8580fc5369bd82e288f683bb7ca0d46"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "maven"
  ],
  "readme": "# grunt-maven-tasks\n\n> Grunt maven tasks - install artifacts locally or deploy and release articats to maven repository.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-maven-tasks --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-maven-tasks');\n```\n\n## Supported Maven Goals\n\n### no goal\n\nIf no goal is specified, the goal will be set to the target name. This means that the target name must be one of `install`, `deploy` or `release`. For more flexibility with the naming of your targets, and/or having multiple targets with the same goal, specify the goal explicitly.\n\n### install\n\n_Run the `grunt maven` task with the `goal` option set to `install`._\n\nThis tasks packages and installs an artifact to your local maven repository.\n\n### deploy\n\n_Run the `grunt maven` task with the `goal` option set to `deploy`._\n\nThis tasks packages and deploys an artifact to a maven repository.\n\n### release task\n\n_Run the `grunt maven` task with the `goal` option set to `release`._\n\nThis task packages and releases an artifact to a maven repository. It will update the version number in the package.json file to the next development version, and, if this is a git project, it will commit and tag the release.\n\nBy default, it will increment the version number using the `minor` version. This can be overridden in the config section using the `mode` option.\n\n_Run this task with the `grunt maven:[your-task-target]:major` command to bump the next development version using the `major` version mode._\n\n_Run this task with the `grunt maven:[your-task-target]:1.2.0` command to release version `1.2.0`._\n\n_Run this task with the `grunt maven:[your-task-target]:1.2.0:major` command to release version 1.2.0 and bump the next development version using the `major` version mode._\n\n### Overview\n\nIn your project's Gruntfile, add a section named `maven` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  maven: {\n    options: {\n      goal: 'deploy',\n      groupId: 'com.example',\n      url: '<repository-url>',\n    },\n    src: [ '**', '!node_modules/**' ]\n  }\n})\n```\n\n### Options\n\n#### options.goal\nType `String`\nDefault: target name\n\nThe maven goal for the target artifact. Valid values are 'deploy' and 'release'. Defaults to the target name\n\n#### options.groupId\nType: `String`\nRequired\n\nThe maven group id to use when deploying and artifact\n\n#### options.artifactId\nType: `String`\nDefault: name found in package.json\n\nThe maven artifact id to use when deploying and artifact\n\n#### options.version\nType: `String`\nDefault: version found in package.json\n\nThe version to use when deploying to the maven repository\n\n#### options.classifier\nType: `String`\nOptional\n\nThe classifier to use when deploying to the maven repository\n\n#### options.mode\nType: `String`\nDefault: minor\n\nThe mode passed to semver.inc to determine next development version.\n\n#### options.packaging\nType: `String`\nDefault: zip\n\nThe packaging to use when deploying to the maven repository. Will also\ndetermine the archiving type. As internally the grunt-contrib-compress\nplugin is used to package the artifact, only archiving types supported\nby this module is supported.\n\n#### options.url\nType: `String`\nRequired\n\nThe url for the maven repository to deploy to.\n\n#### options.repositoryId\nType: `String`\nOptional\n\nThe repository id of the repository to deploy to. Used for looking up authentication in settings.xml.\n\n### options.type\nType: `String`\nOptional\n\nEnables you to choose a different file extension for your artifact besides .zip which is useful when using the Maven WAR-plugin\n\n### options.injectDestFolder\nType: `String`\nOptional\n\nEnables you to turn off the injection of destination folder inside your artifact allowing you to choose the structure you want by configuring the compress task.\n\n### options.commitPrefix\nType: `String`\nOptional\n\nPrefix for the commit message when releasing.\n\n### Files\n\nFiles may be specified using any of the supported [Grunt file mapping formats](http://gruntjs.com/configuring-tasks#files).\n\n### Usage Examples\n\n#### Default Options\nIn this example, only required options have been specified and the 'goal' is defaulted to the target name.\n\nRunning `grunt maven:deploy` will deploy the artifact to the `snapshot-repos` folder using the groupId `com.example`, the artifactId set to the name in `package.json` and the version set to the version in `package.json`.\n\nRunning `grunt maven:release` will deploy the artifact to the `release-repo` folder using the groupId `com.example`, the artifactId set to the name in `package.json` and the version set to the version in `package.json`, but with the `-SNAPSHOT` suffix removed. The version in `package.json` will be incremented to the next minor SNAPSHOT version, ie. if it was `1.0.0-SNAPSHOT` it will end up at `1.1.0-SNAPSHOT`. If this is a git repository, it will also commit and tag the release version, as well as commiting the updated package.json version.\n\n```js\ngrunt.initConfig({\n  maven: {\n    options: { groupId: 'com.example' },\n    deploy: {\n      options: {\n        goal: 'deploy',\n        url: 'file://snapshot-repo'\n      },\n      src: [ '**', '!node_modules/**' ]\n    },\n    release: {\n      options: {\n        goal: 'release',\n        url: 'file://release-repo'\n      },\n      src: [ '**', '!node_modules/**' ]\n    }\n  }\n})\n\ngrunt.registerTask('deploy', [ 'clean', 'test', 'maven:deploy' ]);\ngrunt.registerTask('release', [ 'clean', 'test', 'maven:release' ]);\n```\n\nThe `maven` task can be configured to support deployment or release of multiple artifacts:\n\n```js\ngrunt.initConfig({\n  maven: {\n    deployA: {\n      options: {\n        goal: 'deploy',\n        groupId: 'com.example',\n        artifactId: 'myNodeArtifact',\n        url: '<repository-url>',\n      },\n      src: [ '**', '!node_modules/**' ]\n    },\n    deployB: {\n      options: {\n        goal: 'deploy',\n        groupId: 'com.example',\n        artifactId: 'myBrowserArtifact',\n        url: '<repository-url>',\n      },\n      src: [ 'target/browser/**', '!target/browser/node_modules/**' ]\n    }\n  }\n})\n```\n\n#### Custom Options\nIn this example, the artifactId has been explicitly set, and the version bumping used when releasing is set to `'patch'` level rather than the default `'minor'`.\n\n```js\ngrunt.initConfig({\n  maven: {\n    options: { groupId: 'com.example', artifactId: 'example-project' },\n    deploy: {\n      options: { url: 'file://snapshot-repo' },\n      src: [ '**', '!node_modules/**' ]\n    },\n    release: {\n      options: { url: 'file://release-repo', mode: 'patch' },\n      src: [ '**', '!node_modules/**' ]\n    }\n  }\n})\n```\n\nIn order to customize the output archive, please look at the documenations for the [grunt-contrib-compress task](https://github.com/gruntjs/grunt-contrib-compress).\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "_id": "grunt-maven-tasks@1.2.0",
  "_from": "grunt-maven-tasks@>=1.2.0 <1.3.0"
}
